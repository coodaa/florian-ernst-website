import { Descriptor, LocatorHash } from '@yarnpkg/core';
import { FetchResult, Locator, Package } from '@yarnpkg/core';
import { Linker, LinkOptions, MinimalLinkOptions, Installer } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
import { PnpSettings } from '@yarnpkg/pnp';
export declare class PnpLinker implements Linker {
    protected mode: string;
    supportsPackage(pkg: Package, opts: MinimalLinkOptions): boolean;
    findPackageLocation(locator: Locator, opts: LinkOptions): Promise<PortablePath>;
    findPackageLocator(location: PortablePath, opts: LinkOptions): Promise<Locator | null>;
    makeInstaller(opts: LinkOptions): PnpInstaller;
}
export declare class PnpInstaller implements Installer {
    protected opts: LinkOptions;
    protected mode: string;
    private readonly packageRegistry;
    private readonly virtualTemplates;
    constructor(opts: LinkOptions);
    getCustomDataKey(): string;
    private customData;
    attachCustomData(customData: any): void;
    installPackage(pkg: Package, fetchResult: FetchResult): Promise<{
        packageLocation: PortablePath;
        buildDirective: import("@yarnpkg/core").BuildDirective[] | null;
    }>;
    attachInternalDependencies(locator: Locator, dependencies: Array<[Descriptor, Locator]>): Promise<void>;
    attachExternalDependents(locator: Locator, dependentPaths: Array<PortablePath>): Promise<void>;
    finalizeInstall(): Promise<{
        customData: {
            store: Map<LocatorHash, {
                manifest: {
                    os: string[] | null;
                    cpu: string[] | null;
                    scripts: Map<string, string>;
                    preferUnplugged: boolean | null;
                };
                misc: {
                    extractHint: boolean;
                    hasBindingGyp: boolean;
                };
            }>;
        };
    }>;
    finalizeInstallWithPnp(pnpSettings: PnpSettings): Promise<void>;
    private locateNodeModules;
    private readonly unpluggedPaths;
    private unplugPackageIfNeeded;
    private shouldBeUnplugged;
    private unplugPackage;
    private getPackageInformation;
    private getDiskInformation;
}
