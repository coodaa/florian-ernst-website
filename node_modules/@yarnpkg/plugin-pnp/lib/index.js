"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PnpLinker = exports.PnpInstaller = exports.quotePathIfNeeded = exports.getPnpPath = exports.pnpUtils = exports.jsInstallUtils = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const semver_1 = tslib_1.__importDefault(require("semver"));
const PnpLinker_1 = require("./PnpLinker");
const unplug_1 = tslib_1.__importDefault(require("./commands/unplug"));
const jsInstallUtils = tslib_1.__importStar(require("./jsInstallUtils"));
exports.jsInstallUtils = jsInstallUtils;
const pnpUtils = tslib_1.__importStar(require("./pnpUtils"));
exports.pnpUtils = pnpUtils;
const getPnpPath = (project) => {
    let mainFilename;
    let otherFilename;
    if (project.topLevelWorkspace.manifest.type === `module`) {
        mainFilename = `.pnp.cjs`;
        otherFilename = `.pnp.js`;
    }
    else {
        mainFilename = `.pnp.js`;
        otherFilename = `.pnp.cjs`;
    }
    return {
        main: fslib_1.ppath.join(project.cwd, mainFilename),
        other: fslib_1.ppath.join(project.cwd, otherFilename),
    };
};
exports.getPnpPath = getPnpPath;
const quotePathIfNeeded = (path) => {
    return /\s/.test(path) ? JSON.stringify(path) : path;
};
exports.quotePathIfNeeded = quotePathIfNeeded;
async function setupScriptEnvironment(project, env, makePathWrapper) {
    const pnpPath = exports.getPnpPath(project).main;
    const pnpRequire = `--require ${exports.quotePathIfNeeded(fslib_1.npath.fromPortablePath(pnpPath))}`;
    if (pnpPath.includes(` `) && semver_1.default.lt(process.versions.node, `12.0.0`))
        throw new Error(`Expected the build location to not include spaces when using Node < 12.0.0 (${process.versions.node})`);
    if (fslib_1.xfs.existsSync(pnpPath)) {
        let nodeOptions = env.NODE_OPTIONS || ``;
        const pnpRegularExpression = /\s*--require\s+\S*\.pnp\.c?js\s*/g;
        nodeOptions = nodeOptions.replace(pnpRegularExpression, ` `).trim();
        nodeOptions = nodeOptions ? `${pnpRequire} ${nodeOptions}` : pnpRequire;
        env.NODE_OPTIONS = nodeOptions;
    }
}
async function populateYarnPaths(project, definePath) {
    definePath(exports.getPnpPath(project).main);
    definePath(exports.getPnpPath(project).other);
    definePath(project.configuration.get(`pnpDataPath`));
    definePath(project.configuration.get(`pnpUnpluggedFolder`));
}
const plugin = {
    hooks: {
        populateYarnPaths,
        setupScriptEnvironment,
    },
    configuration: {
        nodeLinker: {
            description: `The linker used for installing Node packages, one of: "pnp", "node-modules"`,
            type: core_1.SettingsType.STRING,
            default: `pnp`,
        },
        pnpMode: {
            description: `If 'strict', generates standard PnP maps. If 'loose', merges them with the n_m resolution.`,
            type: core_1.SettingsType.STRING,
            default: `strict`,
        },
        pnpShebang: {
            description: `String to prepend to the generated PnP script`,
            type: core_1.SettingsType.STRING,
            default: `#!/usr/bin/env node`,
        },
        pnpIgnorePatterns: {
            description: `Array of glob patterns; files matching them will use the classic resolution`,
            type: core_1.SettingsType.STRING,
            default: [],
            isArray: true,
        },
        pnpEnableInlining: {
            description: `If true, the PnP data will be inlined along with the generated loader`,
            type: core_1.SettingsType.BOOLEAN,
            default: true,
        },
        pnpFallbackMode: {
            description: `If true, the generated PnP loader will follow the top-level fallback rule`,
            type: core_1.SettingsType.STRING,
            default: `dependencies-only`,
        },
        pnpUnpluggedFolder: {
            description: `Folder where the unplugged packages must be stored`,
            type: core_1.SettingsType.ABSOLUTE_PATH,
            default: `./.yarn/unplugged`,
        },
        pnpDataPath: {
            description: `Path of the file where the PnP data (used by the loader) must be written`,
            type: core_1.SettingsType.ABSOLUTE_PATH,
            default: `./.pnp.data.json`,
        },
    },
    linkers: [
        PnpLinker_1.PnpLinker,
    ],
    commands: [
        unplug_1.default,
    ],
};
var PnpLinker_2 = require("./PnpLinker");
Object.defineProperty(exports, "PnpInstaller", { enumerable: true, get: function () { return PnpLinker_2.PnpInstaller; } });
Object.defineProperty(exports, "PnpLinker", { enumerable: true, get: function () { return PnpLinker_2.PnpLinker; } });
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
