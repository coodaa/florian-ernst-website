"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const pack_1 = __importDefault(require("./commands/pack"));
const packUtils = __importStar(require("./packUtils"));
exports.packUtils = packUtils;
const DEPENDENCY_TYPES = [`dependencies`, `devDependencies`, `peerDependencies`];
const WORKSPACE_PROTOCOL = `workspace:`;
const beforeWorkspacePacking = (workspace, rawManifest) => {
    if (rawManifest.publishConfig) {
        if (rawManifest.publishConfig.main)
            rawManifest.main = rawManifest.publishConfig.main;
        if (rawManifest.publishConfig.browser)
            rawManifest.browser = rawManifest.publishConfig.browser;
        if (rawManifest.publishConfig.module)
            rawManifest.module = rawManifest.publishConfig.module;
        if (rawManifest.publishConfig.bin) {
            rawManifest.bin = rawManifest.publishConfig.bin;
        }
    }
    const project = workspace.project;
    for (const dependencyType of DEPENDENCY_TYPES) {
        for (const descriptor of workspace.manifest.getForScope(dependencyType).values()) {
            const matchingWorkspace = project.tryWorkspaceByDescriptor(descriptor);
            const range = core_1.structUtils.parseRange(descriptor.range);
            if (range.protocol !== WORKSPACE_PROTOCOL)
                continue;
            if (matchingWorkspace === null) {
                if (project.tryWorkspaceByIdent(descriptor) === null) {
                    throw new core_2.ReportError(core_2.MessageName.WORKSPACE_NOT_FOUND, `${core_1.structUtils.prettyDescriptor(project.configuration, descriptor)}: No local workspace found for this range`);
                }
            }
            else {
                let versionToWrite;
                // For workspace:path/to/workspace and workspace:* we look up the workspace version
                if (core_1.structUtils.areDescriptorsEqual(descriptor, matchingWorkspace.anchoredDescriptor) || range.selector === `*`)
                    versionToWrite = matchingWorkspace.manifest.version;
                else
                    // for workspace:version we simply strip the protocol
                    versionToWrite = range.selector;
                rawManifest[dependencyType][core_1.structUtils.stringifyIdent(descriptor)] = versionToWrite;
            }
        }
    }
};
const plugin = {
    hooks: {
        beforeWorkspacePacking,
    },
    commands: [
        pack_1.default,
    ],
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
