import { Project } from '@yarnpkg/core';
import { PortablePath, Filename } from '@yarnpkg/fslib';
import { PnpApi } from '@yarnpkg/pnp';
export declare enum LinkType {
    HARD = "HARD",
    SOFT = "SOFT"
}
export declare enum NodeModulesHoistingLimits {
    WORKSPACES = "workspaces",
    DEPENDENCIES = "dependencies",
    NONE = "none"
}
export declare type NodeModulesBaseNode = {
    dirList: Set<Filename>;
};
export declare type NodeModulesPackageNode = {
    locator: LocatorKey;
    target: PortablePath;
    linkType: LinkType;
    dirList?: undefined;
    aliases: Array<string>;
};
/**
 * Node modules tree - a map of every folder within the node_modules, along with their
 * directory listing and whether they are a symlink and their location.
 *
 * Sample contents:
 * /home/user/project/node_modules -> {dirList: ['foo', 'bar']}
 * /home/user/project/node_modules/foo -> {target: '/home/user/project/.yarn/.cache/foo.zip/node_modules/foo', linkType: 'HARD'}
 * /home/user/project/node_modules/bar -> {target: '/home/user/project/packages/bar', linkType: 'SOFT'}
 */
export declare type NodeModulesTree = Map<PortablePath, NodeModulesBaseNode | NodeModulesPackageNode>;
export interface NodeModulesTreeOptions {
    pnpifyFs?: boolean;
    hoistingLimitsByCwd?: Map<PortablePath, NodeModulesHoistingLimits>;
    project?: Project;
}
/** Package locator key for usage inside maps */
declare type LocatorKey = string;
/**
 * Returns path to archive, if package location is inside the archive.
 *
 * @param packagePath package location
 *
 * @returns path to archive is location is insde the archive or null otherwise
 */
export declare const getArchivePath: (packagePath: PortablePath) => PortablePath | null;
/**
 * Retrieve full package list and build hoisted `node_modules` directories
 * representation in-memory.
 *
 * @param pnp PnP API
 *
 * @returns hoisted `node_modules` directories representation in-memory
 */
export declare const buildNodeModulesTree: (pnp: PnpApi, options: NodeModulesTreeOptions) => NodeModulesTree;
export declare type NodeModulesLocatorMap = Map<LocatorKey, {
    target: PortablePath;
    linkType: LinkType;
    locations: Array<PortablePath>;
    aliases: Array<string>;
}>;
export declare const buildLocatorMap: (nodeModulesTree: NodeModulesTree) => NodeModulesLocatorMap;
export {};
