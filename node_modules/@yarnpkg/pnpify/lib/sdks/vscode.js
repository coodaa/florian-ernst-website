"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSCODE_SDKS = exports.generateFlowBinWrapper = exports.generateSvelteLanguageServerWrapper = exports.generateStylelintWrapper = exports.generateTypescriptWrapper = exports.generatePrettierWrapper = exports.generateEslintWrapper = exports.generateDefaultWrapper = exports.addVSCodeWorkspaceConfiguration = exports.VSCodeConfiguration = void 0;
const tslib_1 = require("tslib");
const fslib_1 = require("@yarnpkg/fslib");
const sdkUtils = tslib_1.__importStar(require("../sdkUtils"));
var VSCodeConfiguration;
(function (VSCodeConfiguration) {
    VSCodeConfiguration["settings"] = "settings.json";
    VSCodeConfiguration["extensions"] = "extensions.json";
})(VSCodeConfiguration = exports.VSCodeConfiguration || (exports.VSCodeConfiguration = {}));
const addVSCodeWorkspaceConfiguration = async (pnpApi, type, patch) => {
    const relativeFilePath = `.vscode/${type}`;
    await sdkUtils.addSettingWorkspaceConfiguration(pnpApi, relativeFilePath, patch);
};
exports.addVSCodeWorkspaceConfiguration = addVSCodeWorkspaceConfiguration;
const generateDefaultWrapper = async (pnpApi) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`search.exclude`]: {
            [`**/.yarn`]: true,
            [`**/.pnp.*`]: true,
        },
    });
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.extensions, {
        [`recommendations`]: [
            `arcanis.vscode-zipfs`,
        ],
    });
};
exports.generateDefaultWrapper = generateDefaultWrapper;
const generateEslintWrapper = async (pnpApi, target, wrapper) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`eslint.nodePath`]: fslib_1.npath.fromPortablePath(fslib_1.ppath.dirname(fslib_1.ppath.dirname(fslib_1.ppath.dirname(wrapper.getProjectPathTo(`lib/api.js`))))),
    });
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.extensions, {
        [`recommendations`]: [
            `dbaeumer.vscode-eslint`,
        ],
    });
};
exports.generateEslintWrapper = generateEslintWrapper;
const generatePrettierWrapper = async (pnpApi, target, wrapper) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`prettier.prettierPath`]: fslib_1.npath.fromPortablePath(wrapper.getProjectPathTo(`index.js`)),
    });
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.extensions, {
        [`recommendations`]: [
            `esbenp.prettier-vscode`,
        ],
    });
};
exports.generatePrettierWrapper = generatePrettierWrapper;
const generateTypescriptWrapper = async (pnpApi, target, wrapper) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`typescript.tsdk`]: fslib_1.npath.fromPortablePath(fslib_1.ppath.dirname(wrapper.getProjectPathTo(`lib/tsserver.js`))),
        [`typescript.enablePromptUseWorkspaceTsdk`]: true,
    });
};
exports.generateTypescriptWrapper = generateTypescriptWrapper;
const generateStylelintWrapper = async (pnpApi, target, wrapper) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`stylelint.stylelintPath`]: fslib_1.npath.fromPortablePath(wrapper.getProjectPathTo(`lib/index.js`)),
    });
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.extensions, {
        [`recommendations`]: [
            `stylelint.vscode-stylelint`,
        ],
    });
};
exports.generateStylelintWrapper = generateStylelintWrapper;
const generateSvelteLanguageServerWrapper = async (pnpApi, target, wrapper) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`svelte.language-server.ls-path`]: fslib_1.npath.fromPortablePath(wrapper.getProjectPathTo(`bin/server.js`)),
    });
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.extensions, {
        [`recommendations`]: [
            `svelte.svelte-vscode`,
        ],
    });
};
exports.generateSvelteLanguageServerWrapper = generateSvelteLanguageServerWrapper;
const generateFlowBinWrapper = async (pnpApi, target, wrapper) => {
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.settings, {
        [`flow.pathToFlow`]: fslib_1.npath.fromPortablePath(`\${workspaceFolder}/${wrapper.getProjectPathTo(`cli.js`)}`),
    });
    await exports.addVSCodeWorkspaceConfiguration(pnpApi, VSCodeConfiguration.extensions, {
        [`recommendations`]: [
            `flowtype.flow-for-vscode`,
        ],
    });
};
exports.generateFlowBinWrapper = generateFlowBinWrapper;
exports.VSCODE_SDKS = [
    [null, exports.generateDefaultWrapper],
    [`eslint`, exports.generateEslintWrapper],
    [`prettier`, exports.generatePrettierWrapper],
    [`typescript-language-server`, null],
    [`typescript`, exports.generateTypescriptWrapper],
    [`stylelint`, exports.generateStylelintWrapper],
    [`svelte-language-server`, exports.generateSvelteLanguageServerWrapper],
    [`flow-bin`, exports.generateFlowBinWrapper],
];
