"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.COC_VIM_SDKS = exports.generateTypescriptWrapper = exports.generateEslintWrapper = exports.addCocVimWorkspaceConfiguration = exports.CocVimConfiguration = void 0;
const tslib_1 = require("tslib");
const fslib_1 = require("@yarnpkg/fslib");
const sdkUtils = tslib_1.__importStar(require("../sdkUtils"));
var CocVimConfiguration;
(function (CocVimConfiguration) {
    CocVimConfiguration["settings"] = "coc-settings.json";
})(CocVimConfiguration = exports.CocVimConfiguration || (exports.CocVimConfiguration = {}));
const addCocVimWorkspaceConfiguration = async (pnpApi, type, patch) => {
    const relativeFilePath = `.vim/${type}`;
    await sdkUtils.addSettingWorkspaceConfiguration(pnpApi, relativeFilePath, patch);
};
exports.addCocVimWorkspaceConfiguration = addCocVimWorkspaceConfiguration;
const generateEslintWrapper = async (pnpApi, target, wrapper) => {
    await exports.addCocVimWorkspaceConfiguration(pnpApi, CocVimConfiguration.settings, {
        [`eslint.packageManager`]: `yarn`,
        [`eslint.nodePath`]: fslib_1.npath.fromPortablePath(fslib_1.ppath.dirname(fslib_1.ppath.dirname(fslib_1.ppath.dirname(wrapper.getProjectPathTo(`lib/api.js`))))),
    });
};
exports.generateEslintWrapper = generateEslintWrapper;
const generateTypescriptWrapper = async (pnpApi, target, wrapper) => {
    await exports.addCocVimWorkspaceConfiguration(pnpApi, CocVimConfiguration.settings, {
        [`tsserver.tsdk`]: fslib_1.npath.fromPortablePath(fslib_1.ppath.dirname(wrapper.getProjectPathTo(`lib/tsserver.js`))),
    });
};
exports.generateTypescriptWrapper = generateTypescriptWrapper;
exports.COC_VIM_SDKS = [
    [`eslint`, exports.generateEslintWrapper],
    [`typescript`, exports.generateTypescriptWrapper],
];
