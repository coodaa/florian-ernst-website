"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortableNodeModulesFS = exports.NodeModulesFS = void 0;
const tslib_1 = require("tslib");
const fslib_1 = require("@yarnpkg/fslib");
const fslib_2 = require("@yarnpkg/fslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const WatchManager_1 = require("./WatchManager");
const buildNodeModulesTree_1 = require("./buildNodeModulesTree");
const resolveNodeModulesPath_1 = require("./resolveNodeModulesPath");
class NodeModulesFS extends fslib_2.ProxiedFS {
    constructor(pnp, { realFs = fs_1.default, pnpifyFs = true } = {}) {
        super(fslib_1.npath);
        this.baseFs = new PortableNodeModulesFS(pnp, { baseFs: new fslib_2.NodeFS(realFs), pnpifyFs });
    }
    mapFromBase(path) {
        return fslib_1.npath.fromPortablePath(path);
    }
    mapToBase(path) {
        return fslib_1.npath.toPortablePath(path);
    }
}
exports.NodeModulesFS = NodeModulesFS;
const WRITE_FLAGS_REGEX = /[+wa]/;
class PortableNodeModulesFS extends fslib_2.FakeFS {
    constructor(pnp, { baseFs = new fslib_2.NodeFS(), pnpifyFs = true } = {}) {
        super(fslib_1.ppath);
        if (!pnp.getDependencyTreeRoots)
            throw new Error(`NodeModulesFS supports PnP API versions 3+, please upgrade your PnP API provider`);
        this.options = { baseFs, pnpifyFs };
        this.baseFs = baseFs;
        this.nodeModulesTree = buildNodeModulesTree_1.buildNodeModulesTree(pnp, this.options);
        this.watchManager = new WatchManager_1.WatchManager();
        const pnpRootPath = fslib_1.npath.toPortablePath(pnp.getPackageInformation(pnp.topLevel).packageLocation);
        this.pnpFilePath = fslib_1.ppath.join(pnpRootPath, `.pnp.js`);
        this.watchPnpFile(pnpRootPath);
    }
    watchPnpFile(pnpRootPath) {
        this.baseFs.watch(pnpRootPath, { persistent: false }, (_, filename) => {
            if (filename === `.pnp.js`) {
                delete require.cache[this.pnpFilePath];
                const pnp = require(this.pnpFilePath);
                this.nodeModulesTree = buildNodeModulesTree_1.buildNodeModulesTree(pnp, this.options);
                this.watchManager.notifyWatchers((nodePath) => resolveNodeModulesPath_1.resolveNodeModulesPath(nodePath, this.nodeModulesTree));
            }
        });
    }
    persistPath(dir) {
        const pathStack = [];
        let curPath = dir;
        while (!this.baseFs.existsSync(curPath)) {
            pathStack.push(curPath);
            curPath = fslib_1.ppath.dirname(curPath);
        }
        for (const fullPath of pathStack.reverse()) {
            this.baseFs.mkdirSync(fullPath);
        }
    }
    persistVirtualParentFolder(p) {
        if (typeof p !== `number`) {
            const parentPath = this.resolvePath(fslib_1.ppath.dirname(p));
            if (parentPath.dirList) {
                this.persistPath(parentPath.resolvedPath);
            }
        }
    }
    getExtractHint(hints) {
        return this.baseFs.getExtractHint(hints);
    }
    resolve(path) {
        return this.baseFs.resolve(this.resolvePath(path).resolvedPath);
    }
    getBaseFs() {
        return this.baseFs;
    }
    resolvePath(p) {
        if (typeof p === `number`) {
            return { resolvedPath: p, fullOriginalPath: p };
        }
        else {
            const fullOriginalPath = this.pathUtils.resolve(p);
            return { ...resolveNodeModulesPath_1.resolveNodeModulesPath(fullOriginalPath, this.nodeModulesTree), fullOriginalPath };
        }
    }
    resolveFilePath(p) {
        if (typeof p === `number`)
            return p;
        const pnpPath = this.resolvePath(p);
        return pnpPath.resolvedPath;
    }
    resolveDirOrFilePath(p) {
        if (typeof p === `number`)
            return p;
        const pnpPath = this.resolvePath(p);
        return pnpPath.forwardedDirPath || pnpPath.resolvedPath;
    }
    resolveLink(p, op, onSymlink, onRealPath) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.isSymlink) {
            let stat;
            try {
                stat = this.baseFs.lstatSync(pnpPath.resolvedPath);
            }
            catch (e) { }
            if (stat) {
                return onSymlink(stat, this.pathUtils.relative(this.pathUtils.dirname(pnpPath.fullOriginalPath), pnpPath.resolvedPath));
            }
        }
        return onRealPath(pnpPath.forwardedDirPath || pnpPath.resolvedPath);
    }
    static makeSymlinkStats(stats) {
        return Object.assign(stats, {
            isFile: () => false,
            isDirectory: () => false,
            isSymbolicLink: () => true,
        });
    }
    getRealPath() {
        return this.baseFs.getRealPath();
    }
    async openPromise(p, flags, mode) {
        if (WRITE_FLAGS_REGEX.test(flags))
            this.persistVirtualParentFolder(p);
        return await this.baseFs.openPromise(this.resolveFilePath(p), flags, mode);
    }
    openSync(p, flags, mode) {
        if (WRITE_FLAGS_REGEX.test(flags))
            this.persistVirtualParentFolder(p);
        return this.baseFs.openSync(this.resolveFilePath(p), flags, mode);
    }
    async opendirPromise(p, opts) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.dirList || this.resolvePath(fslib_1.ppath.join(p, `node_modules`)).dirList) {
            let fsDirList = [];
            try {
                fsDirList = await this.baseFs.readdirPromise(pnpPath.resolvedPath);
            }
            catch (e) {
                // Ignore errors
            }
            const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
            return fslib_1.opendir(this, p, entries);
        }
        else {
            return await this.baseFs.opendirPromise(pnpPath.resolvedPath, opts);
        }
    }
    opendirSync(p, opts) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.dirList || this.resolvePath(fslib_1.ppath.join(p, `node_modules`)).dirList) {
            let fsDirList = [];
            try {
                fsDirList = this.baseFs.readdirSync(pnpPath.resolvedPath);
            }
            catch (e) {
                // Ignore errors
            }
            const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
            return fslib_1.opendir(this, p, entries);
        }
        else {
            return this.baseFs.opendirSync(pnpPath.resolvedPath, opts);
        }
    }
    async readPromise(fd, buffer, offset, length, position) {
        return await this.baseFs.readPromise(fd, buffer, offset, length, position);
    }
    readSync(fd, buffer, offset, length, position) {
        return this.baseFs.readSync(fd, buffer, offset, length, position);
    }
    async writePromise(fd, buffer, offset, length, position) {
        if (typeof buffer === `string`) {
            return await this.baseFs.writePromise(fd, buffer, offset);
        }
        else {
            return await this.baseFs.writePromise(fd, buffer, offset, length, position);
        }
    }
    writeSync(fd, buffer, offset, length, position) {
        if (typeof buffer === `string`) {
            return this.baseFs.writeSync(fd, buffer, offset);
        }
        else {
            return this.baseFs.writeSync(fd, buffer, offset, length, position);
        }
    }
    async closePromise(fd) {
        await this.baseFs.closePromise(fd);
    }
    closeSync(fd) {
        this.baseFs.closeSync(fd);
    }
    createReadStream(p, opts) {
        return this.baseFs.createReadStream(p !== null ? this.resolveFilePath(p) : p, opts);
    }
    createWriteStream(p, opts) {
        return this.baseFs.createWriteStream(p !== null ? this.resolveDirOrFilePath(p) : p, opts);
    }
    async realpathPromise(p) {
        const pnpPath = this.resolvePath(p);
        return pnpPath.dirList ? pnpPath.resolvedPath : this.baseFs.realpathPromise(pnpPath.resolvedPath);
    }
    realpathSync(p) {
        const pnpPath = this.resolvePath(p);
        return pnpPath.dirList ? pnpPath.resolvedPath : this.baseFs.realpathSync(pnpPath.resolvedPath);
    }
    async existsPromise(p) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.dirList) {
            return true;
        }
        else {
            return await this.baseFs.existsPromise(pnpPath.resolvedPath);
        }
    }
    existsSync(p) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.dirList) {
            return true;
        }
        else {
            return this.baseFs.existsSync(pnpPath.resolvedPath);
        }
    }
    async accessPromise(p, mode) {
        return await this.baseFs.accessPromise(this.resolveDirOrFilePath(p), mode);
    }
    accessSync(p, mode) {
        return this.baseFs.accessSync(this.resolveDirOrFilePath(p), mode);
    }
    async statPromise(p) {
        return await this.baseFs.statPromise(this.resolveDirOrFilePath(p));
    }
    statSync(p) {
        return this.baseFs.statSync(this.resolveDirOrFilePath(p));
    }
    async lstatPromise(p) {
        return this.resolveLink(p, `lstat`, stats => PortableNodeModulesFS.makeSymlinkStats(stats), async (resolvedPath) => await this.baseFs.lstatPromise(resolvedPath));
    }
    lstatSync(p) {
        return this.resolveLink(p, `lstat`, stats => PortableNodeModulesFS.makeSymlinkStats(stats), resolvedPath => this.baseFs.lstatSync(this.resolveDirOrFilePath(resolvedPath)));
    }
    async chmodPromise(p, mask) {
        return await this.baseFs.chmodPromise(this.resolveDirOrFilePath(p), mask);
    }
    chmodSync(p, mask) {
        return this.baseFs.chmodSync(this.resolveDirOrFilePath(p), mask);
    }
    async chownPromise(p, uid, gid) {
        return await this.baseFs.chownPromise(this.resolveDirOrFilePath(p), uid, gid);
    }
    chownSync(p, uid, gid) {
        return this.baseFs.chownSync(this.resolveDirOrFilePath(p), uid, gid);
    }
    async renamePromise(oldP, newP) {
        return await this.baseFs.renamePromise(this.resolveDirOrFilePath(oldP), this.resolveDirOrFilePath(newP));
    }
    renameSync(oldP, newP) {
        return this.baseFs.renameSync(this.resolveDirOrFilePath(oldP), this.resolveDirOrFilePath(newP));
    }
    async copyFilePromise(sourceP, destP, flags) {
        return await this.baseFs.copyFilePromise(this.resolveFilePath(sourceP), this.resolveDirOrFilePath(destP), flags);
    }
    copyFileSync(sourceP, destP, flags) {
        return this.baseFs.copyFileSync(this.resolveFilePath(sourceP), this.resolveDirOrFilePath(destP), flags);
    }
    async appendFilePromise(p, content, opts) {
        return await this.baseFs.appendFilePromise(this.resolveDirOrFilePath(p), content, opts);
    }
    appendFileSync(p, content, opts) {
        return this.baseFs.appendFileSync(this.resolveDirOrFilePath(p), content, opts);
    }
    async writeFilePromise(p, content, opts) {
        return await this.baseFs.writeFilePromise(this.resolveDirOrFilePath(p), content, opts);
    }
    writeFileSync(p, content, opts) {
        return this.baseFs.writeFileSync(this.resolveDirOrFilePath(p), content, opts);
    }
    async unlinkPromise(p) {
        return await this.baseFs.unlinkPromise(this.resolveDirOrFilePath(p));
    }
    unlinkSync(p) {
        return this.baseFs.unlinkSync(this.resolveDirOrFilePath(p));
    }
    async utimesPromise(p, atime, mtime) {
        return await this.baseFs.utimesPromise(this.resolveDirOrFilePath(p), atime, mtime);
    }
    utimesSync(p, atime, mtime) {
        return this.baseFs.utimesSync(this.resolveDirOrFilePath(p), atime, mtime);
    }
    async mkdirPromise(p, opts) {
        const pnpPath = this.resolvePath(p);
        this.persistVirtualParentFolder(p);
        return this.baseFs.mkdirPromise(pnpPath.resolvedPath, opts);
    }
    mkdirSync(p, opts) {
        const pnpPath = this.resolvePath(p);
        this.persistVirtualParentFolder(p);
        return this.baseFs.mkdirSync(pnpPath.resolvedPath, opts);
    }
    async rmdirPromise(p, opts) {
        return await this.baseFs.rmdirPromise(this.resolveDirOrFilePath(p), opts);
    }
    rmdirSync(p, opts) {
        return this.baseFs.rmdirSync(this.resolveDirOrFilePath(p), opts);
    }
    async linkPromise(existingP, newP) {
        return await this.baseFs.linkPromise(this.resolveDirOrFilePath(existingP), this.resolveDirOrFilePath(newP));
    }
    linkSync(existingP, newP) {
        return this.baseFs.linkSync(this.resolveDirOrFilePath(existingP), this.resolveDirOrFilePath(newP));
    }
    async symlinkPromise(target, p) {
        return await this.baseFs.symlinkPromise(this.resolveDirOrFilePath(target), this.resolveDirOrFilePath(p));
    }
    symlinkSync(target, p) {
        return this.baseFs.symlinkSync(this.resolveDirOrFilePath(target), this.resolveDirOrFilePath(p));
    }
    async readFilePromise(p, encoding) {
        // This weird switch is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)
        switch (encoding) {
            case `utf8`:
                return await this.baseFs.readFilePromise(this.resolveFilePath(p), encoding);
            default:
                return await this.baseFs.readFilePromise(this.resolveFilePath(p), encoding);
        }
    }
    readFileSync(p, encoding) {
        // This weird switch is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)
        switch (encoding) {
            case `utf8`:
                return this.baseFs.readFileSync(this.resolveFilePath(p), encoding);
            default:
                return this.baseFs.readFileSync(this.resolveFilePath(p), encoding);
        }
    }
    async readdirPromise(p, { withFileTypes } = {}) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.dirList || this.resolvePath(fslib_1.ppath.join(p, `node_modules`)).dirList) {
            let fsDirList = [];
            try {
                fsDirList = await this.baseFs.readdirPromise(pnpPath.resolvedPath);
            }
            catch (e) {
                // Ignore errors
            }
            const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
            if (!withFileTypes)
                return entries;
            return entries.map(name => {
                return Object.assign(this.lstatSync(fslib_1.ppath.join(p, name)), {
                    name,
                });
            });
        }
        else {
            return await this.baseFs.readdirPromise(pnpPath.resolvedPath, { withFileTypes: withFileTypes });
        }
    }
    readdirSync(p, { withFileTypes } = {}) {
        const pnpPath = this.resolvePath(p);
        if (pnpPath.dirList || this.resolvePath(fslib_1.ppath.join(p, `node_modules`)).dirList) {
            let fsDirList = [];
            try {
                fsDirList = this.baseFs.readdirSync(pnpPath.resolvedPath);
            }
            catch (e) {
                // Ignore errors
            }
            const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
            if (!withFileTypes)
                return entries;
            return entries.map(name => {
                return Object.assign(this.lstatSync(fslib_1.ppath.join(p, name)), {
                    name,
                });
            });
        }
        else {
            return this.baseFs.readdirSync(pnpPath.resolvedPath, { withFileTypes: withFileTypes });
        }
    }
    async readlinkPromise(p) {
        return this.resolveLink(p, `readlink`, (_stats, targetPath) => targetPath, async (targetPath) => await this.baseFs.readlinkPromise(this.resolveDirOrFilePath(targetPath)));
    }
    readlinkSync(p) {
        return this.resolveLink(p, `readlink`, (_stats, targetPath) => targetPath, targetPath => this.baseFs.readlinkSync(this.resolveDirOrFilePath(targetPath)));
    }
    async truncatePromise(p, len) {
        return await this.baseFs.truncatePromise(this.resolveDirOrFilePath(p), len);
    }
    truncateSync(p, len) {
        return this.baseFs.truncateSync(this.resolveDirOrFilePath(p), len);
    }
    watch(p, a, b) {
        const pnpPath = this.resolvePath(p);
        const watchPath = pnpPath.resolvedPath;
        if (watchPath && pnpPath.dirList) {
            const callback = typeof a === `function` ? a : typeof b === `function` ? b : () => { };
            return this.watchManager.registerWatcher(watchPath, pnpPath.dirList, callback);
        }
        else {
            return this.baseFs.watch(this.resolveDirOrFilePath(p), 
            // @ts-expect-error
            a, b);
        }
    }
    watchFile(p, a, b) {
        return this.baseFs.watchFile(this.resolveDirOrFilePath(p), 
        // @ts-expect-error
        a, b);
    }
    unwatchFile(p, cb) {
        return this.baseFs.unwatchFile(this.resolveDirOrFilePath(p), cb);
    }
}
exports.PortableNodeModulesFS = PortableNodeModulesFS;
