/// <reference types="node" />
import { Dirent, Filename, MkdirOptions, ExtractHintOptions, WatchFileCallback, WatchFileOptions, StatWatcher, OpendirOptions, Dir } from '@yarnpkg/fslib';
import { RmdirOptions } from '@yarnpkg/fslib';
import { FSPath, NativePath, PortablePath } from '@yarnpkg/fslib';
import { WatchOptions, WatchCallback, Watcher } from '@yarnpkg/fslib';
import { FakeFS, WriteFileOptions, ProxiedFS } from '@yarnpkg/fslib';
import { CreateReadStreamOptions, CreateWriteStreamOptions } from '@yarnpkg/fslib';
import { PnpApi } from '@yarnpkg/pnp';
import fs from 'fs';
import { NodeModulesTreeOptions } from './buildNodeModulesTree';
export declare type NodeModulesFSOptions = {
    realFs?: typeof fs;
    pnpifyFs?: boolean;
};
export declare class NodeModulesFS extends ProxiedFS<NativePath, PortablePath> {
    protected readonly baseFs: FakeFS<PortablePath>;
    constructor(pnp: PnpApi, { realFs, pnpifyFs }?: NodeModulesFSOptions);
    protected mapFromBase(path: PortablePath): NativePath;
    protected mapToBase(path: NativePath): PortablePath;
}
interface PortableNodeModulesFSOptions extends NodeModulesTreeOptions {
    baseFs?: FakeFS<PortablePath>;
    pnpifyFs?: boolean;
}
export declare class PortableNodeModulesFS extends FakeFS<PortablePath> {
    private readonly baseFs;
    private readonly options;
    private readonly watchManager;
    private readonly pnpFilePath;
    private nodeModulesTree;
    constructor(pnp: PnpApi, { baseFs, pnpifyFs }?: PortableNodeModulesFSOptions);
    private watchPnpFile;
    private persistPath;
    private persistVirtualParentFolder;
    getExtractHint(hints: ExtractHintOptions): boolean;
    resolve(path: PortablePath): PortablePath;
    getBaseFs(): FakeFS<PortablePath>;
    private resolvePath;
    private resolveFilePath;
    private resolveDirOrFilePath;
    private resolveLink;
    private static makeSymlinkStats;
    getRealPath(): PortablePath;
    openPromise(p: PortablePath, flags: string, mode?: number): Promise<number>;
    openSync(p: PortablePath, flags: string, mode?: number): number;
    opendirPromise(p: PortablePath, opts?: OpendirOptions): Promise<Dir<PortablePath>>;
    opendirSync(p: PortablePath, opts?: OpendirOptions): Dir<PortablePath>;
    readPromise(fd: number, buffer: Buffer, offset?: number, length?: number, position?: number): Promise<number>;
    readSync(fd: number, buffer: Buffer, offset?: number, length?: number, position?: number): number;
    writePromise(fd: number, buffer: Buffer, offset?: number, length?: number, position?: number): Promise<number>;
    writePromise(fd: number, buffer: string, position?: number): Promise<number>;
    writeSync(fd: number, buffer: Buffer, offset?: number, length?: number, position?: number): number;
    writeSync(fd: number, buffer: string, position?: number): number;
    closePromise(fd: number): Promise<void>;
    closeSync(fd: number): void;
    createReadStream(p: PortablePath | null, opts?: CreateReadStreamOptions): fs.ReadStream;
    createWriteStream(p: PortablePath | null, opts?: CreateWriteStreamOptions): fs.WriteStream;
    realpathPromise(p: PortablePath): Promise<PortablePath>;
    realpathSync(p: PortablePath): PortablePath;
    existsPromise(p: PortablePath): Promise<boolean>;
    existsSync(p: PortablePath): boolean;
    accessPromise(p: PortablePath, mode?: number): Promise<void>;
    accessSync(p: PortablePath, mode?: number): void;
    statPromise(p: PortablePath): Promise<fs.Stats>;
    statSync(p: PortablePath): fs.Stats;
    lstatPromise(p: PortablePath): Promise<any>;
    lstatSync(p: PortablePath): any;
    chmodPromise(p: PortablePath, mask: number): Promise<void>;
    chmodSync(p: PortablePath, mask: number): void;
    chownPromise(p: PortablePath, uid: number, gid: number): Promise<void>;
    chownSync(p: PortablePath, uid: number, gid: number): void;
    renamePromise(oldP: PortablePath, newP: PortablePath): Promise<void>;
    renameSync(oldP: PortablePath, newP: PortablePath): void;
    copyFilePromise(sourceP: PortablePath, destP: PortablePath, flags?: number): Promise<void>;
    copyFileSync(sourceP: PortablePath, destP: PortablePath, flags?: number): void;
    appendFilePromise(p: FSPath<PortablePath>, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): Promise<void>;
    appendFileSync(p: FSPath<PortablePath>, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): void;
    writeFilePromise(p: FSPath<PortablePath>, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): Promise<void>;
    writeFileSync(p: FSPath<PortablePath>, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): void;
    unlinkPromise(p: PortablePath): Promise<void>;
    unlinkSync(p: PortablePath): void;
    utimesPromise(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): Promise<void>;
    utimesSync(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): void;
    mkdirPromise(p: PortablePath, opts: MkdirOptions): Promise<void>;
    mkdirSync(p: PortablePath, opts: MkdirOptions): void;
    rmdirPromise(p: PortablePath, opts?: RmdirOptions): Promise<void>;
    rmdirSync(p: PortablePath, opts?: RmdirOptions): void;
    linkPromise(existingP: PortablePath, newP: PortablePath): Promise<void>;
    linkSync(existingP: PortablePath, newP: PortablePath): void;
    symlinkPromise(target: PortablePath, p: PortablePath): Promise<void>;
    symlinkSync(target: PortablePath, p: PortablePath): void;
    readFilePromise(p: FSPath<PortablePath>, encoding: 'utf8'): Promise<string>;
    readFilePromise(p: FSPath<PortablePath>, encoding?: string): Promise<Buffer>;
    readFileSync(p: FSPath<PortablePath>, encoding: 'utf8'): string;
    readFileSync(p: FSPath<PortablePath>, encoding?: string): Buffer;
    readdirPromise(p: PortablePath): Promise<Array<Filename>>;
    readdirPromise(p: PortablePath, opts: {
        withFileTypes: false;
    }): Promise<Array<Filename>>;
    readdirPromise(p: PortablePath, opts: {
        withFileTypes: true;
    }): Promise<Array<Dirent>>;
    readdirPromise(p: PortablePath, opts: {
        withFileTypes: boolean;
    }): Promise<Array<Filename> | Array<Dirent>>;
    readdirSync(p: PortablePath): Array<Filename>;
    readdirSync(p: PortablePath, opts: {
        withFileTypes: false;
    }): Array<Filename>;
    readdirSync(p: PortablePath, opts: {
        withFileTypes: true;
    }): Array<Dirent>;
    readdirSync(p: PortablePath, opts: {
        withFileTypes: boolean;
    }): Array<Filename> | Array<Dirent>;
    readlinkPromise(p: PortablePath): Promise<any>;
    readlinkSync(p: PortablePath): any;
    truncatePromise(p: PortablePath, len?: number): Promise<void>;
    truncateSync(p: PortablePath, len?: number): void;
    watch(p: PortablePath, cb?: WatchCallback): Watcher;
    watch(p: PortablePath, opts: WatchOptions, cb?: WatchCallback): Watcher;
    watchFile(p: PortablePath, cb: WatchFileCallback): StatWatcher;
    watchFile(p: PortablePath, opts: WatchFileOptions, cb: WatchFileCallback): StatWatcher;
    unwatchFile(p: PortablePath, cb?: WatchFileCallback): void;
}
export {};
